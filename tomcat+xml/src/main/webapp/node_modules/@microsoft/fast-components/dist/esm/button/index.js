import { __decorate } from "tslib";
import { attr } from "@microsoft/fast-element";
import { Button as FoundationButton, buttonTemplate as template, } from "@microsoft/fast-foundation";
import { buttonStyles as styles } from "./button.styles";
/**
 * @internal
 */
export class Button extends FoundationButton {
    connectedCallback() {
        super.connectedCallback();
        if (!this.appearance) {
            this.appearance = "neutral";
        }
    }
    /**
     * Applies 'icon-only' class when there is only an SVG in the default slot
     *
     * @public
     * @remarks
     */
    defaultSlottedContentChanged(oldValue, newValue) {
        const slottedElements = this.defaultSlottedContent.filter(x => x.nodeType === Node.ELEMENT_NODE);
        if (slottedElements.length === 1 && slottedElements[0] instanceof SVGElement) {
            this.control.classList.add("icon-only");
        }
        else {
            this.control.classList.remove("icon-only");
        }
    }
}
__decorate([
    attr
], Button.prototype, "appearance", void 0);
/**
 * A function that returns a {@link @microsoft/fast-foundation#Button} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#buttonTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-button>`
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus | delegatesFocus}
 */
export const fastButton = Button.compose({
    baseName: "button",
    baseClass: FoundationButton,
    template,
    styles,
    shadowOptions: {
        delegatesFocus: true,
    },
});
export { styles as buttonStyles };
