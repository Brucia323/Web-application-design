import { Direction, RtlScrollConverter } from "@microsoft/fast-web-utilities";
import addons from "@storybook/addons";
import { STORY_RENDERED } from "@storybook/core-events";
import AnchoredRegionTemplate from "./fixtures/base.html";
import "./index";
addons.getChannel().addListener(STORY_RENDERED, (name) => {
    if (name.toLowerCase().startsWith("anchored-region")) {
        //scroll stuff into view
        document.querySelectorAll("div[id^=viewport]").forEach((el) => {
            el.scrollTop = 280;
            RtlScrollConverter.setScrollLeft(el, el.dir === Direction.rtl ? -250 : 250, el.dir === Direction.rtl ? Direction.rtl : Direction.ltr);
        });
        // header region
        const headerFixedButton = document.getElementById("anchor-header-menu-fixed");
        headerFixedButton === null || headerFixedButton === void 0 ? void 0 : headerFixedButton.addEventListener("click", (e) => {
            const menu = document.getElementById("header-menu-fixed");
            if (menu.style.display === "none") {
                menu.style.display = "";
            }
            else {
                menu.style.display = "none";
            }
        });
        const headerScalingButton = document.getElementById("anchor-header-menu-scaling");
        headerScalingButton === null || headerScalingButton === void 0 ? void 0 : headerScalingButton.addEventListener("click", (e) => {
            const menu = document.getElementById("header-menu-scaling");
            if (menu.style.display === "none") {
                menu.style.display = "";
            }
            else {
                menu.style.display = "none";
            }
        });
        const regionScalingUpdate = document.getElementById("region-upd1");
        const viewPort = document.getElementById("viewport-upd1");
        const togglesRegion = document.getElementById("toggles-region");
        if (!togglesRegion || !viewPort) {
            return;
        }
        viewPort.addEventListener("scroll", () => regionScalingUpdate.update());
        // toggle anchor example
        document.querySelectorAll("[id^=toggles1-anchor").forEach(anchor => {
            anchor.addEventListener("click", (e) => {
                togglesRegion.setAttribute("anchor", e.target.id);
            });
        });
        [
            {
                id: "toggle-positions-horizontal",
                attribute: "horizontal-default-position",
                firstValue: "right",
                secondValue: "left",
            },
            {
                id: "toggle-positions-vertical",
                attribute: "vertical-default-position",
                firstValue: "top",
                secondValue: "bottom",
            },
            {
                id: "toggle-inset-vertical",
                attribute: "vertical-inset",
                firstValue: "true",
                secondValue: "false",
            },
            {
                id: "toggle-inset-horizontal",
                attribute: "horizontal-inset",
                firstValue: "true",
                secondValue: "false",
            },
        ].forEach(({ id, attribute, firstValue, secondValue }) => {
            const toggleElement = document.getElementById(id);
            if (toggleElement) {
                toggleElement.addEventListener("click", () => {
                    togglesRegion.setAttribute(attribute, togglesRegion.getAttribute(attribute) === firstValue
                        ? secondValue
                        : firstValue);
                });
            }
        });
        document
            .querySelectorAll("[id^=anchor-menu-many]")
            .forEach((el) => {
            el.addEventListener("click", (e) => {
                const menuNum = el.id.substr(16);
                const menu = document.getElementById(`menu-many${menuNum}`);
                menu.style.display = menu.style.display === "none" ? "" : "none";
            });
        });
    }
});
export default {
    title: "Anchored Region",
};
export const AnchoredRegion = () => AnchoredRegionTemplate;
